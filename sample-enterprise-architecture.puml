@startuml
' plantuml-multi-cloud-diagrams

!define C4Puml https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master
!define AzurePuml https://raw.githubusercontent.com/plantuml-stdlib/Azure-PlantUML/release/2-2/dist
!define KubernetesPuml https://raw.githubusercontent.com/dcasati/kubernetes-PlantUML/master/dist

!includeurl C4Puml/C4_Context.puml
!includeurl C4Puml/C4_Component.puml
!includeurl C4Puml/C4_Container.puml

' Azure Resources
!includeurl AzurePuml/AzureCommon.puml

!includeurl AzurePuml/Compute/AzureVirtualMachine.puml
!includeurl AzurePuml/Databases/AzureSqlDatabase.puml
!includeurl AzurePuml/Networking/AzureVirtualNetwork.puml
!includeurl AzurePuml/Networking/AzureVPNGateway.puml
!includeurl AzurePuml/Networking/AzureBastion.puml
!includeurl AzurePuml/Networking/AzureFirewall.puml
!includeurl AzurePuml/Networking/AzurePrivateLink.puml
!includeurl AzurePuml/Integration/AzureServiceBus.puml
!includeurl AzurePuml/Networking/AzureDNS.puml

' Kubernetes Resources
!includeurl KubernetesPuml/kubernetes_Context.puml
!includeurl KubernetesPuml/kubernetes_Simplified.puml

!includeurl KubernetesPuml/OSS/KubernetesApi.puml
!includeurl KubernetesPuml/OSS/KubernetesIng.puml
!includeurl KubernetesPuml/OSS/KubernetesPod.puml
!includeurl KubernetesPuml/OSS/KubernetesSvc.puml

title Enterprise Integration Architecture

skinparam nodesep 10
skinparam ranksep 20

Boundary(azure, "Azure Cloud") {
    Boundary(azurerg, "Azure Resource Group") {
        AzureDNS(azuredns,"DNS","api.adb.internal")

        Boundary(azurevn,"azure-vnet", "10.1.0.0/16") {
			Boundary(azuregw,"Hub", "10.1.255.0/24") {
				AzureVPNGateway(avpn, "Azure VPN Gateway", "VPN Gateway")
				AzureBastion(azurebastion, "Azure Bastion", "Bastion Host/Jumpbox")
				AzureFirewall(firewall, "Firewall", "Intersubnet Traffic")
				AzurePrivateLink(azureprivatelink, "Azure Private Link", "Expose Private APIs to Private Network")
			}

			Boundary(azureutil,"Utility", "10.1.100.0/24") {

				AzureServiceBus(azureservicebus, "Azure Service Bus", "Message Broker")
			}

			Boundary(azureprod,"Production", "10.1.1.0/24") {
				Cluster_Boundary(cluster, "Kubernetes Cluster") {

					Namespace_Boundary(nsReport, "Reporting") {
						KubernetesSvc(repsvc, "Reporting Service", "")
						KubernetesPod(podrep1, "", "")
						KubernetesPod(podrep2, "","")
					}

					Namespace_Boundary(nsBackEnd, "Project and Grants") {
						KubernetesSvc(projsvc, "Project Service", "")
						KubernetesPod(podproj1, "", "")
						KubernetesPod(podproj2, "", "")
						KubernetesPod(podproj3, "", "")
					}

					'Namespace_Boundary(nsUtil, "Finance") {'
					'	KubernetesSvc(finsvc, "Finance Service", "")'
					'	KubernetesPod(podfin1, "", "")'
					'	KubernetesPod(podfin2, "","")'
					'}'

					
				}

                AzureSqlDatabase(azuredb, "Azure DB", "Azure SQL Database")
			}

			
		}
    }
}

Boundary(onprem, "On-Premises Environment") {
    Boundary(onpremnet,"onprem-net", "10.2.0.0/16") {
        Boundary(onpremprod,"Production", "10.2.1.0/24") {
			Component(onpremsrv, "On-Premises Finance Server", "Handles the Finance Service")
            ContainerDb(onpremdb, "On-Premises Database", "Stores application data")
		}
		Boundary(onprem-gw,"Gateway", "10.2.255.0/24") {
			AzureVPNGateway(onpremgw, "On-Premises VPN Gateway", "Establishes VPN connection")
		}

		Boundary(onpremshared,"Shared Services", "10.2.100.0/24") {
			Component(onprempam, "PAM", "Privilage Access Management")
		}
		
	}
    
}

Lay_R(firewall,avpn)
Lay_D(azurebastion,firewall)
Lay_R(azureprivatelink,azurebastion)

Lay_D(onpremgw,onpremshared)

'Rel_R(avm, azuredb, "Reads/Writes")
Rel_D(onpremsrv, onpremdb, "Reads/Writes")
Rel_R(onpremsrv, onpremgw, "Establishes VPN connection")
BiRel_R(onpremgw, avpn, "VPN connection")

Rel(projsvc,podproj1,"exposes pods", "project pod")
Rel(projsvc,podproj2,"exposes pods", "project pod")
Rel(projsvc,podproj3,"exposes pods", "project pod")

Rel(repsvc,podrep1,"exposes pods", "report pods")
Rel(repsvc,podrep2,"exposes pods", "report pods")

'DB
BiRel_U(azuredb,podproj1,"accesses data", "project pod")
BiRel_U(azuredb,podproj2,"accesses data", "project pod")
BiRel_U(azuredb,podproj3,"accesses data", "project pod")

BiRel_U(azuredb,podrep1,"accesses data", "report pods")
BiRel_U(azuredb,podrep2,"accesses data", "report pods")


'Messaging
'Rel(podproj1,azureprivatelink,"ServiceBus API connection", "project pod")
'Rel(podproj2,azureprivatelink,"ServiceBus API connection", "project pod")

Rel_D(podproj3,azureservicebus,"send message","Through PrivateLink and Firewall")
Rel_U(azureservicebus,onpremsrv,"receive message","Through PrivateLink and Firewall")
Lay_D(onpremsrv,azureprivatelink)

'DNS 
BiRel_U(onpremsrv,azuredns,"DNS Query","Through PrivateLink and Firewall")

@enduml
